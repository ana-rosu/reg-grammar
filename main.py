# reading a right linear regular grammar from the given file
# returning the starting symbol of the grammar
# and the grammar itself as a dictionary with each non-terminal symbol as a key and a list of its productions as the value
def read_grammar(file):
    grammar = {}
    starting_symbol = ''
    with open(file, "r") as f:
        for line in f:
            # reading the productions
            line = line.strip().split("->")
            non_terminal_symbol = line[0].strip()

            if not starting_symbol:
                starting_symbol = non_terminal_symbol
            productions = line[1].strip().split("|")

            if non_terminal_symbol not in grammar:
                grammar[non_terminal_symbol] = []
            for rule in productions:
                grammar[non_terminal_symbol].extend(rule.split())

    return starting_symbol, grammar

def belongs(grammar, symbol, word):
    # check if the empty word can be generated by the regular grammar or not
    if word == "":
        return "epsilon" in grammar[symbol]

    # if we reach the last letter of the word/the word has only one letter
    if len(word) == 1:
        for production in grammar[symbol]:
            # if the production is of form x (just a terminal symbol) -> check if the letter is equal to the terminal symbol
            if len(production) == 1 and word == production:
                    return True
            # if the production is of form X (just a nonterminal symbol) -> check if we find a terminal symbol equal to our letter in the list of productions of the next symbol
            if len(production) == 1 and production.isupper() and word in grammar[production]:
                return True
            # if the production is of form xX -> check if the letter is equal to x and the nonterminal symbol X has epsilon (terminal symbol) in the list of its productions
            if len(production) > 1 and word == production[0] and "epsilon" in grammar[production[1]]:
                    return True

    for production in grammar[symbol]:
        if len(production) > 1 and production[0] == word[0]:
            if belongs(grammar, production[1], word[1:]):
                return True

    return False

s, g = read_grammar('grammar.txt')
word = input("Enter a word: ")
if word == "":
    word = "Î»"
if(belongs(g,s,word)):
    print(f'The word {word} is generated by the grammar.')
else:
    print(f'The word {word} is NOT generated by the grammar!')
# reading a right linear regular grammar from the given file and returning it as a dictionary with each non-terminal as a key and a list of possible strings as its corresponding value
def read_grammar(file):
    grammar = {}
    starting_symbol = ''
    with open(file, "r") as f:
        for line in f:
            # reading the productions
            line = line.strip().split("->")
            non_terminal_symbol = line[0].strip()

            if not starting_symbol:
                starting_symbol = non_terminal_symbol
            productions = line[1].strip().split("|")

            if non_terminal_symbol not in grammar:
                grammar[non_terminal_symbol] = []
            for rule in productions:
                grammar[non_terminal_symbol].extend(rule.split())

    return starting_symbol, grammar

def belongs(grammar, symbol, word, i):
    # check if the empty word can be generated by the regular grammar or not
    if word == "":
        return "epsilon" in grammar[symbol]

    # if we reach the last letter of the word
    if i == len(word) - 1:
        # if the current symbol can only generate epsilon
        if grammar[symbol][0] == "epsilon":
            return False
        for production in grammar[symbol]:
            if word[i] == production[0]:
                if len(production) == 1:
                    return True
                if len(production) > 1 and "epsilon" in grammar[production[1]]:
                    return True
            else:
                return False

    for production in grammar[symbol]:
        print(production)
        # if we have a terminal and a nonterminal symbol
        if len(production) > 1 and production[0] == word[i]:
            if belongs(grammar, production[1], word, i+1):
                return True

    return False
# accepted words
# aabbe
# aabb
# d
# aaaaaad


# neacceptate
# dd
# aaaaaad

s, g = read_grammar('grammar.txt')
print(g)
word = input("Enter a word: ")
print(belongs(g,s,word, 0))